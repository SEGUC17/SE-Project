import logger from '../dist/logger.es2015.js';

logger.on();

// just test logger
logger('Should be filestack context');

// can create logging contexts
const pickerLogger = logger.context('picker');
pickerLogger('Should be [filestack][picker] context');

// on / off switching
window.filestackInternals.logger.off();
logger('This info should NOT appear');
pickerLogger('This info should NOT appear');
window.filestackInternals.logger.on();
logger('This info should appear');

// Object displaying
logger('Can show many params', 1, 2, 3);
logger('Can show object internals', {
  foo: {
    foo0: 'bar',
    foo1: 'bar bar',
    foo2: 'bar bar bar',
  },
  foo0: 'bar',
  foo1: 'bar bar',
  foo2: 'bar bar bar',
});
logger('Reports function as function', {
  foo: () => {
    return { bar: 'baz' };
  },
});
logger('Unless name of that function is json, then calls it', {
  json: () => {
    return { bar: 'baz' };
  },
});
logger('But if called json function throws falls back to showing it as a function', {
  json: () => {
    throw new Error('foo');
  },
});

const filename = 'foo.txt';
const fileContent = 'qwerty';
const fileType = 'text/plain';
logger('Reports File class', new File([fileContent], filename, { type: fileType }));
