(function () {
// Logger can be used and required from many places.
// This is global on / off switch for it, which all
// created logger contexts respect.

var onOff = {
  init() {
    window.filestackInternals.logger.working = false;
  },
  isWorking() {
    return window.filestackInternals.logger.working;
  },
  on() {
    window.filestackInternals.logger.working = true;
  },
  off() {
    window.filestackInternals.logger.working = false;
  },
};

/* eslint no-console:0 */

const context = (contextName, onOff) => {
  const api = function log(...stuff) {
    const convertedToStrings = [...stuff].map((thing) => {
      if (typeof thing === 'object') {
        return JSON.stringify(thing, (key, value) => {
          if (typeof value === 'function') {
            // If any function named json is found then call that function to get the json object.
            if (key === 'json') {
              try {
                return value();
              } catch (err) {
                // Throws? No worries. Just go on and return string.
              }
            }
            return '[Function]';
          }
          if (value instanceof File) {
            return `[File name: ${value.name}, mimetype: ${value.type}, size: ${value.size}]`;
          }
          return value;
        }, 2);
      }
      return thing;
    });
    if (onOff.isWorking()) {
      console.log(`[${contextName}]`, ...convertedToStrings);
    }
  };

  api.context = (subContextName) => {
    return context(`${contextName}][${subContextName}`, onOff);
  };

  api.on = onOff.on;
  api.off = onOff.off;

  return api;
};

const logger = context('filestack', onOff);

const initializeGlobalNamespace = () => {
  let namespace;
  if (typeof window === 'object') {
    namespace = window.filestackInternals;
    if (!namespace) {
      namespace = {};
      window.filestackInternals = namespace;
    }
    if (!namespace.logger) {
      namespace.logger = logger;
      onOff.init();
    }
  }
  return namespace;
};

initializeGlobalNamespace();

logger.on();

// just test logger
logger('Should be filestack context');

// can create logging contexts
const pickerLogger = logger.context('picker');
pickerLogger('Should be [filestack][picker] context');

// on / off switching
window.filestackInternals.logger.off();
logger('This info should NOT appear');
pickerLogger('This info should NOT appear');
window.filestackInternals.logger.on();
logger('This info should appear');

// Object displaying
logger('Can show many params', 1, 2, 3);
logger('Can show object internals', {
  foo: {
    foo0: 'bar',
    foo1: 'bar bar',
    foo2: 'bar bar bar',
  },
  foo0: 'bar',
  foo1: 'bar bar',
  foo2: 'bar bar bar',
});
logger('Reports function as function', {
  foo: () => {
    return { bar: 'baz' };
  },
});
logger('Unless name of that function is json, then calls it', {
  json: () => {
    return { bar: 'baz' };
  },
});
logger('But if called json function throws falls back to showing it as a function', {
  json: () => {
    throw new Error('foo');
  },
});

const filename = 'foo.txt';
const fileContent = 'qwerty';
const fileType = 'text/plain';
logger('Reports File class', new File([fileContent], filename, { type: fileType }));

}());